// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TBD_library.Data.EF;

#nullable disable

namespace TBD_library.Data.Migrations
{
    [DbContext(typeof(TBD_libraryDBContext))]
    partial class TBD_libraryDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a18be9c0-aa65-4af8-bd17-00bd9344e575"),
                            RoleId = new Guid("a18be9c0-aa65-4af8-bd17-00bd9344e575")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("RoleTokens", (string)null);
                });

            modelBuilder.Entity("TBD_library.Data.Entities.BCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "khái phá giá trị của nền văn hóa , văn minh nhân loại",
                            Title = "sách văn hóa"
                        },
                        new
                        {
                            Id = 2,
                            Description = "sách nói những gì lênh quan đến cuộc sống mọi thứ tác động đến chúng ta trong cuộc sống",
                            Title = "cuộc sống"
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BorrowBook_id")
                        .HasColumnType("int");

                    b.Property<int>("BorrowCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("Created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 11, 9, 16, 52, 12, 394, DateTimeKind.Local).AddTicks(8381));

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Summary")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BorrowBook_id");

                    b.HasIndex("User_id");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Blair T.Spalding",
                            BorrowBook_id = 1,
                            BorrowCount = 0,
                            Created_at = new DateTime(2022, 11, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "cuốn sách hay nhất mọi thời đại khám phá nhữ giá trị vĩnh hằng",
                            Img = "hanh-trinh-ve-phuong-dong.jpg",
                            Name = "hành trình về phương đông",
                            Status = 0,
                            Summary = "sach hay",
                            User_id = new Guid("a18be9c0-aa65-4af8-bd17-00bd9344e575")
                        },
                        new
                        {
                            Id = 2,
                            Author = "Adam Khoo",
                            BorrowBook_id = 0,
                            BorrowCount = 0,
                            Created_at = new DateTime(2022, 11, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "cuốn sách dạy ra các mẹo để có thể tối ưu tất cả những gì ta có thể làm",
                            Img = "toi-tai-gioi-ban-cung-the.jpg",
                            Name = "tôi tài giỏi bạn cũng thế",
                            Status = 1,
                            Summary = "sach hay",
                            User_id = new Guid("a18be9c0-aa65-4af8-bd17-00bd9344e575")
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.BookInCategory", b =>
                {
                    b.Property<int>("Book_id")
                        .HasColumnType("int");

                    b.Property<int>("BCategory_id")
                        .HasColumnType("int");

                    b.HasKey("Book_id", "BCategory_id");

                    b.HasIndex("BCategory_id");

                    b.ToTable("BookInCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Book_id = 1,
                            BCategory_id = 1
                        },
                        new
                        {
                            Book_id = 2,
                            BCategory_id = 2
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.BorrowBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Borrowed_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 11, 9, 16, 52, 12, 396, DateTimeKind.Local).AddTicks(8233));

                    b.Property<TimeSpan>("Borrowed_time")
                        .HasColumnType("time");

                    b.Property<DateTime>("GiveBack_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid>("User_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("User_id");

                    b.ToTable("BorrowBooks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Borrowed_date = new DateTime(2022, 11, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            Borrowed_time = new TimeSpan(0, 0, 0, 0, 0),
                            GiveBack_date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            User_id = new Guid("a18be9c0-aa65-4af8-bd17-00bd9344e575")
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.BorrowInRoom", b =>
                {
                    b.Property<int>("Borrow_id")
                        .HasColumnType("int");

                    b.Property<int>("Room_id")
                        .HasColumnType("int");

                    b.HasKey("Borrow_id", "Room_id");

                    b.HasIndex("Room_id");

                    b.ToTable("BorrowInRoom", (string)null);

                    b.HasData(
                        new
                        {
                            Borrow_id = 1,
                            Room_id = 1
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.BorrowRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Borrow_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 11, 9, 16, 52, 12, 398, DateTimeKind.Local).AddTicks(3010));

                    b.Property<int>("ParticipantNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<Guid>("User_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("User_id");

                    b.ToTable("BorrowRooms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Borrow_date = new DateTime(2022, 11, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            ParticipantNumber = 0,
                            Time = new TimeSpan(0, 2, 30, 0, 0),
                            User_id = new Guid("a18be9c0-aa65-4af8-bd17-00bd9344e575")
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Categoties", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "những thông tin mới nhất từ thư viện luôn được cập nhật",
                            Title = "thông báo"
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Create_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 11, 9, 16, 52, 12, 398, DateTimeKind.Local).AddTicks(9234));

                    b.Property<int>("Movie_id")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30);

                    b.Property<int>("RegistrationNumber")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("User_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("watching_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Movie_id");

                    b.HasIndex("User_id");

                    b.ToTable("Cinemas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Create_at = new DateTime(2022, 11, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            Movie_id = 2,
                            RegistrationLimit = 35,
                            RegistrationNumber = 1,
                            Status = 0,
                            User_id = new Guid("a18be9c0-aa65-4af8-bd17-00bd9344e575"),
                            watching_date = new DateTime(2022, 11, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.LogBorrowBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Borrowed_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameBook")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sdt")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogBorrowBooks", (string)null);
                });

            modelBuilder.Entity("TBD_library.Data.Entities.LogCinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameLibarian")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationNumber")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<DateTime>("Watching_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LogCinemas", (string)null);
                });

            modelBuilder.Entity("TBD_library.Data.Entities.LogRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LogCinema_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Registration_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sdt")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LogCinema_id");

                    b.ToTable("LogRegistrations", (string)null);
                });

            modelBuilder.Entity("TBD_library.Data.Entities.MCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "mô tả các khía cạnh văn hóa xã hội",
                            Title = "tài liệu"
                        },
                        new
                        {
                            Id = 2,
                            Description = "phim giải trí mang tính gây cười",
                            Title = "hài kịch"
                        },
                        new
                        {
                            Id = 3,
                            Description = "phim được dựng nên bởi các nét vẽ sinh động",
                            Title = "anime"
                        },
                        new
                        {
                            Id = 4,
                            Description = "thể loại phim mang tính chất kịch tính hồi hộp",
                            Title = "hành động"
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Trailer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Quà tặng cuộc sống",
                            Summary = "phim nói về triết lý cuộc sống",
                            Time = new TimeSpan(0, 2, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Name = "đại chiến chén thánh",
                            Summary = "phim nói về cuộc chiến tranh dành chén thánh của các anh linh và master của họ",
                            Time = new TimeSpan(0, 2, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.MovieInCategory", b =>
                {
                    b.Property<int>("Movie_id")
                        .HasColumnType("int");

                    b.Property<int>("MCategory_id")
                        .HasColumnType("int");

                    b.HasKey("Movie_id", "MCategory_id");

                    b.HasIndex("MCategory_id");

                    b.ToTable("MovieInCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Movie_id = 1,
                            MCategory_id = 1
                        },
                        new
                        {
                            Movie_id = 2,
                            MCategory_id = 3
                        },
                        new
                        {
                            Movie_id = 2,
                            MCategory_id = 4
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Conten")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 11, 9, 16, 52, 12, 401, DateTimeKind.Local).AddTicks(9696));

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("User_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("User_id");

                    b.ToTable("Posts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Conten = "dữ liệu mẫu",
                            Created_at = new DateTime(2022, 11, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = 0,
                            Summary = "mẫu ban đầu",
                            Title = "blog mẫu",
                            Updated_at = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            User_id = new Guid("a18be9c0-aa65-4af8-bd17-00bd9344e575"),
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.PostInCategory", b =>
                {
                    b.Property<int>("Post_id")
                        .HasColumnType("int");

                    b.Property<int>("Category_id")
                        .HasColumnType("int");

                    b.HasKey("Post_id", "Category_id");

                    b.HasIndex("Category_id");

                    b.ToTable("PostInCategries", (string)null);

                    b.HasData(
                        new
                        {
                            Post_id = 1,
                            Category_id = 1
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Cinema_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Registration_date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 11, 9, 16, 52, 12, 403, DateTimeKind.Local).AddTicks(4758));

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("User_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Cinema_id");

                    b.HasIndex("User_id");

                    b.ToTable("Registrations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cinema_id = 1,
                            Registration_date = new DateTime(2022, 11, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            Status = 0,
                            User_id = new Guid("a18be9c0-aa65-4af8-bd17-00bd9344e575")
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a18be9c0-aa65-4af8-bd17-00bd9344e575"),
                            ConcurrencyStamp = "b7f26848-cb35-42d4-9cf2-69ee8b5e530b",
                            Discription = "được phép thay đổi và chỉnh sửa mọi tài nguyên hệ thống",
                            Name = "admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RoomName")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Room_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("SessionTime")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rooms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoomName = "phòng họp 2022/11/09 0:00:00",
                            Room_date = new DateTime(2022, 11, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            SessionTime = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Majors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShouldLock")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentCode")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3);

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a18be9c0-aa65-4af8-bd17-00bd9344e575"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59e202df-5f00-4eff-8879-8460630b0cf5",
                            Email = "quangthanhn485@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Majors = "công nghệ thông tin",
                            NormalizedEmail = "quangthanhn485@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEEVKmX5XCxIkiUghLwLjkFLZ3W1IjoXEfR8tfUR0XWFSecyIFXOL2EOmvk4sF1hsKg==",
                            PhoneNumber = "0373045581",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            StudentCode = 0,
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            status = 3
                        });
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Book", b =>
                {
                    b.HasOne("TBD_library.Data.Entities.BorrowBook", "BorrowBook")
                        .WithMany("Books")
                        .HasForeignKey("BorrowBook_id")
                        .IsRequired();

                    b.HasOne("TBD_library.Data.Entities.User", "User")
                        .WithMany("Books")
                        .HasForeignKey("User_id");

                    b.Navigation("BorrowBook");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.BookInCategory", b =>
                {
                    b.HasOne("TBD_library.Data.Entities.BCategory", "BCategory")
                        .WithMany("BookInCategories")
                        .HasForeignKey("BCategory_id")
                        .IsRequired();

                    b.HasOne("TBD_library.Data.Entities.Book", "Book")
                        .WithMany("BookInCategories")
                        .HasForeignKey("Book_id")
                        .IsRequired();

                    b.Navigation("BCategory");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.BorrowBook", b =>
                {
                    b.HasOne("TBD_library.Data.Entities.User", "User")
                        .WithMany("BorrowBooks")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.BorrowInRoom", b =>
                {
                    b.HasOne("TBD_library.Data.Entities.BorrowRoom", "BorrowRoom")
                        .WithMany("BorrowInRooms")
                        .HasForeignKey("Borrow_id")
                        .IsRequired();

                    b.HasOne("TBD_library.Data.Entities.Room", "Room")
                        .WithMany("BorrowInRooms")
                        .HasForeignKey("Room_id")
                        .IsRequired();

                    b.Navigation("BorrowRoom");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.BorrowRoom", b =>
                {
                    b.HasOne("TBD_library.Data.Entities.User", "User")
                        .WithMany("BorrowRooms")
                        .HasForeignKey("User_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Cinema", b =>
                {
                    b.HasOne("TBD_library.Data.Entities.Movie", "Movie")
                        .WithMany("Cinemas")
                        .HasForeignKey("Movie_id")
                        .IsRequired();

                    b.HasOne("TBD_library.Data.Entities.User", "User")
                        .WithMany("Cinemas")
                        .HasForeignKey("User_id")
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.LogRegistration", b =>
                {
                    b.HasOne("TBD_library.Data.Entities.LogCinema", "LogCinema")
                        .WithMany("LogRegistrations")
                        .HasForeignKey("LogCinema_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LogCinema");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.MovieInCategory", b =>
                {
                    b.HasOne("TBD_library.Data.Entities.MCategory", "MCategory")
                        .WithMany("MovieInCategories")
                        .HasForeignKey("MCategory_id")
                        .IsRequired();

                    b.HasOne("TBD_library.Data.Entities.Movie", "Movie")
                        .WithMany("MovieInCategories")
                        .HasForeignKey("Movie_id")
                        .IsRequired();

                    b.Navigation("MCategory");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Post", b =>
                {
                    b.HasOne("TBD_library.Data.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.PostInCategory", b =>
                {
                    b.HasOne("TBD_library.Data.Entities.Category", "Category")
                        .WithMany("PostInCategories")
                        .HasForeignKey("Category_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TBD_library.Data.Entities.Post", "Post")
                        .WithMany("PostInCategories")
                        .HasForeignKey("Post_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Registration", b =>
                {
                    b.HasOne("TBD_library.Data.Entities.Cinema", "Cinema")
                        .WithMany("Registrations")
                        .HasForeignKey("Cinema_id")
                        .IsRequired();

                    b.HasOne("TBD_library.Data.Entities.User", "User")
                        .WithMany("Registrations")
                        .HasForeignKey("User_id")
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.BCategory", b =>
                {
                    b.Navigation("BookInCategories");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Book", b =>
                {
                    b.Navigation("BookInCategories");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.BorrowBook", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.BorrowRoom", b =>
                {
                    b.Navigation("BorrowInRooms");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Category", b =>
                {
                    b.Navigation("PostInCategories");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Cinema", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.LogCinema", b =>
                {
                    b.Navigation("LogRegistrations");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.MCategory", b =>
                {
                    b.Navigation("MovieInCategories");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Movie", b =>
                {
                    b.Navigation("Cinemas");

                    b.Navigation("MovieInCategories");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Post", b =>
                {
                    b.Navigation("PostInCategories");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.Room", b =>
                {
                    b.Navigation("BorrowInRooms");
                });

            modelBuilder.Entity("TBD_library.Data.Entities.User", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("BorrowBooks");

                    b.Navigation("BorrowRooms");

                    b.Navigation("Cinemas");

                    b.Navigation("Posts");

                    b.Navigation("Registrations");
                });
#pragma warning restore 612, 618
        }
    }
}
